{"version":3,"sources":["components/Nav.js","components/LoginForm.js","components/SignupForm.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","logged_out_nav","onClick","display_form","logged_in_nav","handle_logout","logged_in","LoginForm","state","username","password","handle_change","e","name","target","value","setState","prevstate","newState","onSubmit","handle_login","htmlFor","type","this","onChange","React","Component","SignupForm","handle_signup","App","data","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","localStorage","setItem","token","displayed_form","user","removeItem","form","getItem","Authorization","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60f876d6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Nav(props) {\n  const logged_out_nav = (\n    <ul>\n      <li onClick={() => props.display_form('login')}>login</li>\n      <li onClick={() => props.display_form('signup')}>signup</li>\n    </ul>\n  );\n\n  const logged_in_nav = (\n    <ul>\n      <li onClick={props.handle_logout}>logout</li>\n    </ul>\n  );\n  return <div>{props.logged_in ? logged_in_nav : logged_out_nav}</div>;\n}\n\nexport default Nav;\n\nNav.propTypes = {\n  logged_in: PropTypes.bool.isRequired,\n  display_form: PropTypes.func.isRequired,\n  handle_logout: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass LoginForm extends React.Component {\n  state = {\n    username: '',\n    password: ''\n  };\n\n  handle_change = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState(prevstate => {\n      const newState = { ...prevstate };\n      newState[name] = value;\n      return newState;\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={e => this.props.handle_login(e, this.state)}>\n        <h4>Log In</h4>\n        <label htmlFor=\"username\">Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={this.state.username}\n          onChange={this.handle_change}\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={this.state.password}\n          onChange={this.handle_change}\n        />\n        <input type=\"submit\" />\n      </form>\n    );\n  }\n}\n\nexport default LoginForm;\n\nLoginForm.propTypes = {\n  handle_login: PropTypes.func.isRequired\n};\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SignupForm extends React.Component {\n  state = {\n    username: '',\n    password: ''\n  };\n\n  handle_change = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState(prevstate => {\n      const newState = { ...prevstate };\n      newState[name] = value;\n      return newState;\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={e => this.props.handle_signup(e, this.state)}>\n        <h4>Sign Up</h4>\n        <label htmlFor=\"username\">Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={this.state.username}\n          onChange={this.handle_change}\n        />\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={this.state.password}\n          onChange={this.handle_change}\n        />\n        <input type=\"submit\" />\n      </form>\n    );\n  }\n}\n\nexport default SignupForm;\n\nSignupForm.propTypes = {\n  handle_signup: PropTypes.func.isRequired\n};\n\n","import React, { Component } from 'react';\nimport Nav from './components/Nav';\nimport LoginForm from './components/LoginForm';\nimport SignupForm from './components/SignupForm';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayed_form: '',\n      logged_in: localStorage.getItem('token') ? true : false,\n      username: ''\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.logged_in) {\n      fetch('http://localhost:8000/core/current_user/', {\n        headers: {\n          Authorization: `JWT ${localStorage.getItem('token')}`\n        }\n      })\n        .then(res => res.json())\n        .then(json => {\n          this.setState({ username: json.username });\n        });\n    }\n  }\n\n  handle_login = (e, data) => {\n    e.preventDefault();\n    fetch('http://localhost:8000/token-auth/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(res => res.json())\n      .then(json => {\n        localStorage.setItem('token', json.token);\n        this.setState({\n          logged_in: true,\n          displayed_form: '',\n          username: json.user.username\n        });\n      });\n  };\n\n  handle_signup = (e, data) => {\n    e.preventDefault();\n    fetch('http://localhost:8000/core/users/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(res => res.json())\n      .then(json => {\n        localStorage.setItem('token', json.token);\n        this.setState({\n          logged_in: true,\n          displayed_form: '',\n          username: json.username\n        });\n      });\n  };\n\n  handle_logout = () => {\n    localStorage.removeItem('token');\n    this.setState({ logged_in: false, username: '' });\n  };\n\n  display_form = form => {\n    this.setState({\n      displayed_form: form\n    });\n  };\n\n  render() {\n    let form;\n    switch (this.state.displayed_form) {\n      case 'login':\n        form = <LoginForm handle_login={this.handle_login} />;\n        break;\n      case 'signup':\n        form = <SignupForm handle_signup={this.handle_signup} />;\n        break;\n      default:\n        form = null;\n    }\n\n    return (\n      <div className=\"App\">\n        <Nav\n          logged_in={this.state.logged_in}\n          display_form={this.display_form}\n          handle_logout={this.handle_logout}\n        />\n        {form}\n        <h3>\n          {this.state.logged_in\n            ? `Hello, ${this.state.username}`\n            : 'Please Log In'}\n        </h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}